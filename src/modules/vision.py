#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vision Module - Visual Network Mapping
Cr√©e une repr√©sentation visuelle du r√©seau et des services
"""

import logging
from typing import Dict, Any
import json
from datetime import datetime
from rich.table import Table
from rich.progress import Progress
from rich.tree import Tree
import networkx as nx
from rich.console import Console
from rich.panel import Panel

from src.core.scanner import BaseScanner
from src.core.utils import resolve_target

logger = logging.getLogger(__name__)

class VisionScanner(BaseScanner):
    """Scanner de cartographie visuelle du r√©seau"""
    
    def __init__(self, args):
        super().__init__(args)
        self.timeout = args.timeout or 120  # 2 minutes par d√©faut
        self.graph = nx.Graph()
    
    def scan(self, target: str):
        """Effectue la cartographie visuelle du r√©seau"""
        console = Console()
        self.logger.info(f"D√©marrage de la cartographie visuelle sur {target}")
        
        # R√©soudre la cible si n√©cessaire
        target_ip = resolve_target(target)
        
        results = {
            'target': target,
            'target_ip': target_ip,
            'scan_time': datetime.now().isoformat(),
            'network': {
                'nodes': [],
                'edges': [],
                'services': {},
                'total_nodes': 0,
                'total_connections': 0
            }
        }
        
        # Ajouter le n≈ìud cible
        self.graph.add_node(target_ip, type='host', name=target)
        
        # Simuler la d√©couverte de n≈ìuds et de connexions
        with Progress() as progress:
            task = progress.add_task("[cyan]Cartographie du r√©seau...", total=100)
            
            try:
                # Simuler la d√©couverte de n≈ìuds
                discovered_nodes = [
                    {'ip': '192.168.1.1', 'type': 'router', 'name': 'Gateway'},
                    {'ip': '192.168.1.2', 'type': 'host', 'name': 'Server1'},
                    {'ip': '192.168.1.3', 'type': 'host', 'name': 'Server2'}
                ]
                
                # Ajouter les n≈ìuds d√©couverts
                for node in discovered_nodes:
                    self.graph.add_node(node['ip'], type=node['type'], name=node['name'])
                    results['network']['nodes'].append(node)
                
                # Simuler les connexions
                connections = [
                    (target_ip, '192.168.1.1', {'type': 'gateway'}),
                    ('192.168.1.1', '192.168.1.2', {'type': 'lan'}),
                    ('192.168.1.1', '192.168.1.3', {'type': 'lan'})
                ]
                
                # Ajouter les connexions
                for src, dst, data in connections:
                    self.graph.add_edge(src, dst, **data)
                    results['network']['edges'].append({
                        'source': src,
                        'target': dst,
                        'type': data['type']
                    })
                
                # Simuler les services
                services = {
                    '192.168.1.2': [
                        {'port': 80, 'service': 'http', 'version': 'Apache 2.4'},
                        {'port': 443, 'service': 'https', 'version': 'Nginx 1.18'}
                    ],
                    '192.168.1.3': [
                        {'port': 22, 'service': 'ssh', 'version': 'OpenSSH 8.2'},
                        {'port': 3306, 'service': 'mysql', 'version': 'MySQL 8.0'}
                    ]
                }
                
                for host, host_services in services.items():
                    results['network']['services'][host] = host_services
                
                progress.update(task, advance=100)
                self.logger.info("Cartographie termin√©e")
                
            except Exception as e:
                self.logger.error(f"Erreur lors de la cartographie : {str(e)}")
                console.print(f"[red]Erreur lors de la cartographie : {str(e)}[/red]")
                results['error'] = str(e)
        
        results['network']['total_nodes'] = len(results['network']['nodes'])
        results['network']['total_connections'] = len(results['network']['edges'])
        return results
    
    def display_results(self, results):
        """Affiche les r√©sultats de la cartographie"""
        console = Console()
        
        # Panneau de r√©sum√©
        summary = f"""üéØ Cible : {results['target']} ({results['target_ip']})
‚è±Ô∏è  Date : {results['scan_time']}
üîç N≈ìuds d√©couverts : {results['network']['total_nodes']}
üîå Connexions : {results['network']['total_connections']}"""
        
        console.print(Panel(summary, title="ü¶à Vision Cartographie Visuelle", border_style="blue"))
        
        # Cr√©er l'arbre de la topologie
        tree = Tree("üåê Topologie du R√©seau")
        
        # Ajouter les n≈ìuds et leurs connexions
        for node in results['network']['nodes']:
            node_type = "üñ•Ô∏è" if node['type'] == 'host' else "üåê"
            node_tree = tree.add(f"{node_type} {node['name']} ({node['ip']})")
            
            # Ajouter les services si disponibles
            if node['ip'] in results['network']['services']:
                services_tree = node_tree.add("üîå Services")
                for service in results['network']['services'][node['ip']]:
                    services_tree.add(f"Port {service['port']}: {service['service']} ({service['version']})")
        
        console.print("\n[bold cyan]Topologie du R√©seau:[/bold cyan]")
        console.print(tree)
        
        # Afficher les connexions
        if results['network']['edges']:
            console.print("\n[bold cyan]Connexions D√©couvertes:[/bold cyan]")
            connections_table = Table()
            connections_table.add_column("Source", style="cyan")
            connections_table.add_column("Destination", style="green")
            connections_table.add_column("Type", style="yellow")
            
            for edge in results['network']['edges']:
                connections_table.add_row(
                    edge['source'],
                    edge['target'],
                    edge['type']
                )
            
            console.print(connections_table)

def run(target: str, options: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    Ex√©cute le module de visualisation du r√©seau.
    
    Args:
        target (str): La cible √† analyser.
        options (Dict[str, Any], optional): Options suppl√©mentaires. Defaults to None.
    
    Returns:
        Dict[str, Any]: R√©sultats de l'analyse.
    """
    scanner = VisionScanner(options)
    return scanner.scan(target) 