"""
Tests for the vulnerability signature system
"""

import pytest
import os
import tempfile
import json
from src.core.vulnerability_signatures import VulnerabilitySignatures

@pytest.fixture
def temp_signatures_dir():
    """Create temporary signatures directory"""
    with tempfile.TemporaryDirectory() as temp_dir:
        yield temp_dir

@pytest.fixture
def vuln_signatures(temp_signatures_dir):
    """Create VulnerabilitySignatures instance"""
    return VulnerabilitySignatures(signatures_dir=temp_signatures_dir)

def test_initialize_signatures(vuln_signatures):
    """Test signature initialization"""
    assert 'web' in vuln_signatures.signatures
    assert 'network' in vuln_signatures.signatures
    assert 'service' in vuln_signatures.signatures
    
    # Check if default signatures were created
    assert os.path.exists(os.path.join(vuln_signatures.signatures_dir, 'web_signatures.json'))
    assert os.path.exists(os.path.join(vuln_signatures.signatures_dir, 'network_signatures.json'))
    assert os.path.exists(os.path.join(vuln_signatures.signatures_dir, 'service_signatures.json'))

def test_scan_response_web(vuln_signatures):
    """Test web vulnerability scanning"""
    # Test XSS detection
    xss_response = """
    <html>
        <body>
            <script>alert(1)</script>
            <div>Welcome</div>
        </body>
    </html>
    """
    vulnerabilities = vuln_signatures.scan_response(xss_response, 'web')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'xss' for v in vulnerabilities)
    
    # Test SQL injection detection
    sql_response = "Error: ' OR '1'='1"
    vulnerabilities = vuln_signatures.scan_response(sql_response, 'web')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'sql_injection' for v in vulnerabilities)

def test_scan_response_network(vuln_signatures):
    """Test network vulnerability scanning"""
    # Test weak cipher detection
    cipher_response = "SSL/TLS: RC4, DES, 3DES"
    vulnerabilities = vuln_signatures.scan_response(cipher_response, 'network')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'weak_ciphers' for v in vulnerabilities)
    
    # Test default credentials detection
    creds_response = "Login: admin:admin"
    vulnerabilities = vuln_signatures.scan_response(creds_response, 'network')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'default_credentials' for v in vulnerabilities)

def test_scan_response_service(vuln_signatures):
    """Test service vulnerability scanning"""
    # Test buffer overflow detection
    buffer_response = "A" * 1000
    vulnerabilities = vuln_signatures.scan_response(buffer_response, 'service')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'buffer_overflow' for v in vulnerabilities)
    
    # Test command injection detection
    cmd_response = "Error: ; ls"
    vulnerabilities = vuln_signatures.scan_response(cmd_response, 'service')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'command_injection' for v in vulnerabilities)

def test_add_signature(vuln_signatures):
    """Test adding new signature"""
    new_signature = {
        'name': 'Test Vulnerability',
        'patterns': ['test_pattern'],
        'severity': 'MEDIUM',
        'description': 'Test vulnerability description'
    }
    
    # Add new signature
    assert vuln_signatures.add_signature('web', 'test_vuln', new_signature)
    
    # Verify signature was added
    signatures = vuln_signatures.get_signatures('web')
    assert 'test_vuln' in signatures
    assert signatures['test_vuln']['name'] == 'Test Vulnerability'
    
    # Test scanning with new signature
    test_response = "test_pattern found"
    vulnerabilities = vuln_signatures.scan_response(test_response, 'web')
    assert len(vulnerabilities) > 0
    assert any(v['id'] == 'test_vuln' for v in vulnerabilities)

def test_get_signatures(vuln_signatures):
    """Test getting signatures"""
    # Get all signatures
    all_signatures = vuln_signatures.get_signatures()
    assert 'web' in all_signatures
    assert 'network' in all_signatures
    assert 'service' in all_signatures
    
    # Get specific category
    web_signatures = vuln_signatures.get_signatures('web')
    assert 'xss' in web_signatures
    assert 'sql_injection' in web_signatures
    
    # Get invalid category
    invalid_signatures = vuln_signatures.get_signatures('invalid')
    assert invalid_signatures == {} 